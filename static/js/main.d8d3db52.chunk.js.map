{"version":3,"sources":["App.js","index.js"],"names":["App","useState","predictions","setPredictions","image","setImage","a","img","document","getElementById","cocoSsd","model","detect","res","className","strings","forEach","el","console","log","str","class","score","toFixed","push","map","index","key","renderResults","onChange","imageList","run","acceptType","onImageUpload","onClick","dataURL","src","alt","id","style","maxWidth","ReactDOM","render"],"mappings":"ojBAwEeA,MAnEf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAEaF,qBAFb,mBAENG,EAFM,KAECC,EAFD,iDAIb,gCAAAC,EAAA,6DACQC,EAAMC,SAASC,eAAe,OADtC,SAEsBC,MAFtB,UAEQC,EAFR,OAKa,MAAPJ,EALN,gCAMsBI,EAAMC,OAAOL,GANnC,OAMUM,EANV,OAOIV,EAAeU,GAPnB,4CAJa,sBAmDb,OACE,yBAAKC,UAAU,OACb,oDAtCJ,WACE,IAAIC,EAAU,CAAC,cAaf,OAZKb,EAAY,KAEfa,EAAU,GACVb,EAAYc,SAAQ,SAAAC,GAClBC,QAAQC,IAAIF,GACZ,IAAIG,EAAMH,EAAGI,MAAQ,KAAkB,IAAXJ,EAAGK,MAAY,IAAIC,QAAQ,GAAK,IAC5DR,EAAQS,KAAKJ,OAGZhB,IACHW,EAAU,CAAC,4BAGX,6BACGA,EAAQU,KAAI,SAACR,EAAIS,GAAY,OAAQ,uBAAGC,IAAKD,GAAQT,OAuBvDW,GACD,kBAAC,IAAD,CAAgBC,SAnBH,SAAAC,GACfzB,EAASyB,EAAU,IArCR,mCAsCXC,IAiBsCC,WAAY,CAAC,MAAO,MAAO,SAC5D,gBAAGC,EAAH,EAAGA,cAAH,OACC,6BACE,4BAAQC,QAASD,GAAjB,gBADF,OAfF7B,GAA0B,MAAjBA,EAAM+B,QAEf,6BACE,yBAAKC,IAAKhC,EAAM+B,QAASE,IAAI,GAAGC,GAAG,MAAMC,MAAO,CAAEC,SAAU,QAGtD,oCChDhBC,IAASC,OACP,kBAAC,EAAD,MACAlC,SAASC,eAAe,W","file":"static/js/main.d8d3db52.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport '@tensorflow/tfjs'\nimport * as cocoSsd from '@tensorflow-models/coco-ssd'\nimport ImageUploading from 'react-images-uploading'\n\nfunction App() {\n  const [predictions, setPredictions] = useState([])\n  const [image, setImage] = useState()\n\n  async function run() {\n    const img = document.getElementById('img')\n    const model = await cocoSsd.load()\n\n    // Classify the image\n    if (img != null) {\n      const res = await model.detect(img)\n      setPredictions(res)\n    }\n  }\n\n  function renderResults() {\n    let strings = [\"Loading...\"]\n    if ((predictions[0])) {\n      // Get rid of loading string\n      strings = []\n      predictions.forEach(el => {\n        console.log(el)\n        let str = el.class + \"=\" + (el.score * 100-10).toFixed(2) + '%'\n        strings.push(str)\n      })\n    }\n    if (!image) {\n      strings = [\"Please upload an image.\"]\n    }\n    return (\n      <div>\n        {strings.map((el, index) => { return (<p key={index}>{el}</p>) })}\n      </div>\n    )\n  }\n\n  const onChange = imageList => {\n    setImage(imageList[0])\n    run()\n  }\n\n  function renderImage() {\n    if (image && image.dataURL != null)\n      return (\n        <div>\n          <img src={image.dataURL} alt='' id='img' style={{ maxWidth: 600 }} />\n        </div>\n      )\n    else return <div></div>\n  }\n\n  return (\n    <div className='app'>\n      <h3>Image classification</h3>\n      {renderResults()}\n      <ImageUploading onChange={onChange} acceptType={['jpg', 'gif', 'png']}>\n        {({ onImageUpload }) => (\n          <div>\n            <button onClick={onImageUpload}>Upload image</button>&nbsp;\n            {renderImage()}\n          </div>\n        )}\n      </ImageUploading>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}